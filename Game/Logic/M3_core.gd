extends Node

var n_cols = 10
var fields_model = []
enum e_fields_types{EFT_RED, EFT_GREEN, EFT_BLUE, EFT_YELLOW, EFT_EMPTY, EFT_ROCK, EFT_SAND, EFT_M3, EFT_M4, EFT_M5, EFT_M6}

func init():
	randomize()
	for ind in n_cols * n_cols:
		# тип должен указывать на элемент следующий за последним, чтобы можно было брать значение по модулю в пределах полей. 
		fields_model.append(randi() % (e_fields_types.EFT_EMPTY))
		
# ищем потенциальные совпадения.
func find_potential_matches():
	# проходим по стобцам и строкам и ищем клетки с одним типом встречающиеся 2 раза подряд или через клетку.
	# для обнаруженных комбинаций ищем, для недостающего поля, рядом расположенную клетку того же типа но в другой строке или столбце.
	pass

# ищем совпадения по всему игровому полю.
func find_all_matches():
	# в цикле получить массив индексов по столбикам и строкам.
	# найти горизонтальные совпадения.
	# найти вертикальные совпадения.
	# найти пересечения вертикальных и горизонтальных совпадений(если есть).
	# вернуть массив массивов с совпадениями.
	pass
	
# выдаём награду за совпадение(очки, подсказки).
func match_awards(matched_inds, field_type):
	pass

# массив индексов совпавших элементов в общем массиве.
func find_match_in_line(line_array):
	# найти непрерывную последовательность одинаковых значений из 3 и более элементов .
	pass

# генерируем новые элементы и двигаем сверху вниз по свободным клеткам.
func shift_from_top():
	# получаем список индексов в которых было совпадение, а значит теперь они пустые.
	# смещаем вниз тип из клетки расположенной выше.
	# если выше статический элемент - пробуем заполнить из бокового столбика, если нет - пропускаем. 
	# если клетка есть, смещаем последовательно до самого верха. в верхнюю клетку добавляем созданный элемент.
	pass
